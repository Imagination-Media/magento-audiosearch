<?php

/**
 * Audio Search
 *
 * Use Google's cloud Speech to Text api to listen audio and make a search based on what the customer said.
 *
 * @package ImaginationMedia\AudioSearch
 * @author Igor Ludgero Miura <igor@imaginationmedia.com>
 * @copyright Copyright (c) 2018 Imagination Media (https://www.imaginationmedia.com/)
 * @license https://opensource.org/licenses/OSL-3.0.php Open Software License 3.0
 */

/**
 * @var $this \ImaginationMedia\AudioSearch\Block\Search
 */

?>

<div id="popup-notification-link">
    <p class="link">
        <a href="javascript:showSearch();"><?= __('Tell me what you need') ?></a>
    </p>
</div>

<div class="hover_bkgr_fricc" id="popup-notification-search">
    <span class="helper"></span>
    <div>
        <div id="popupCloseButton" class="popupCloseButton" onclick="closePopUp();">X</div>
        <div id="inputAudio">
            <image src="<?= $this->getViewFileUrl('ImaginationMedia_AudioSearch::images/microphone.svg') ?>"
                   id="recordImage" onclick="askForAudio();"/>
            <legend id="imageLegend"><?= __('Click in the image and tell us what you need.') ?></legend>
        </div>
        <div id="loadingAudioImage" style="display: none;">
            <image src="<?= $this->getViewFileUrl('ImaginationMedia_AudioSearch::images/gear.svg') ?>" />
            <p><?= __('Finding results for you...') ?></p>
        </div>
        <p id="error-audio" style="display: none;"><?= __('Invalid file provided. Please try again.') ?></p>
    </div>
</div>

<script>
    URL = window.URL || window.webkitURL;
    var gumStream;
    var rec;
    var input;
    var AudioContext = window.AudioContext || window.webkitAudioContext;
    var audioContext = new AudioContext;

    let popupLinkElement = document.getElementById("popup-notification-link");
    let popupFormElement = document.getElementById("popup-notification-search");
    let errorElement = document.getElementById("error-audio");
    let loadingAudioImage = document.getElementById("loadingAudioImage");
    let divInputAudioElement = document.getElementById("inputAudio");
    let legendElement = document.getElementById("imageLegend");
    var timerSeconds = 0;

    let Recorder = undefined;

    require(["recordJs"], function (Rec) {
        Recorder = Rec;
    });

    function showSearch() {
        legendElement.textContent = "<?= __('Click in the image and tell us what you need.') ?>";
        popupLinkElement.classList.add("hide");
        popupFormElement.classList.add("show");
    }

    function askForAudio() {
        startRecording();
    }

    function closePopUp() {
        popupLinkElement.classList.remove("hide");
        popupFormElement.classList.remove("show");
    }

    function loadData() {
        loadingAudioImage.style.display = "block";
        divInputAudioElement.style.display = "none";
    }

    function finishLoadData() {
        loadingAudioImage.style.display = "none";
        divInputAudioElement.style.display = "block";
    }

    function startRecording() {
        errorElement.style.display = 'none';
        var constraints = {audio: true, video: false};
        navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {
            gumStream = stream;
            input = audioContext.createMediaStreamSource(stream);
            rec = new Recorder(input, {numChannels: 1})
            rec.record();
            var fiveSeconds = 5;
            timerSeconds = 0;
            startTimer(fiveSeconds, legendElement);
        }).catch(function (err) {
            console.log("Error:");
            console.log(err);
        });
    }

    function stopRecording() {
        loadData();
        rec.stop();
        gumStream.getAudioTracks()[0].stop();
        rec.exportWAV(uploadAudio);
    }

    function uploadAudio(blob) {
        let formData = new FormData();
        formData.append('fname', new Date().toISOString() + '.wav');
        formData.append('data', blob);
        let xhr = new XMLHttpRequest();
        xhr.open('POST', '<?= $this->getFormUrl() ?>', true);
        xhr.onload = function () {
            if (xhr.status === 200) {
                if (xhr.responseText !== "") {
                    window.location.href = JSON.parse(xhr.responseText);
                } else {
                    console.log('Impossible to listen');
                }
            } else {
                errorElement.style.display = 'block';
                finishLoadData();
            }
        };
        xhr.send(formData);
    }

    function startTimer(duration, display) {
        var timer = duration, seconds;
        setInterval(function () {
            timerSeconds++;
            seconds = parseInt(timer % 60, 10);
            seconds = seconds < 10 ? "0" + seconds : seconds;
            display.textContent = "Listening: " + seconds;
            if (--timer < 0) {
                timer = duration;
            }
            if (timerSeconds === 7) {
                stopRecording();
            }
        }, 1000);
    }

</script>
